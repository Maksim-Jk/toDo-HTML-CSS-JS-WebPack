(()=>{"use strict";var t={d:(e,s)=>{for(var n in s)t.o(s,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:s[n]})}};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),t.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var s=t.g.document;if(!e&&s&&(s.currentScript&&(e=s.currentScript.src),!e)){var n=s.getElementsByTagName("script");if(n.length)for(var o=n.length-1;o>-1&&!e;)e=n[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.d({},{ZV:()=>u,J0:()=>g,oG:()=>c,pG:()=>r});const e=t.p+"images/leaf.a45bd84a3a8fc5a46f07.svg";function s(){if(console.log(">>>CHECK EMPTY LIST<<<"),0===u.GetTasks().length){const t=`<li id="emptyList" class="list-group-item empty-list">\n              <img src=${e} alt="Empty" width="48" class="mt-3">\n              <div class="empty-list__title">Список дел пуст</div>\n           </li>`;r.insertAdjacentHTML("afterbegin",t)}if(u.GetTasks().length>0){const t=document.querySelector("#emptyList");t&&t.remove()}}function n(){console.log(">>>SAVE TO LOCAL STORAGE<<<"),localStorage.setItem("tasks",JSON.stringify(u.GetTasks()))}const o=t.p+"images/tick.d1ad8838076422324879.svg",a=t.p+"images/cross.53dee2569530f7157781.svg",i=document.querySelector("#form"),c=document.querySelector("#taskInput"),r=document.querySelector("#tasksList"),l=document.querySelector("#deleteAll"),d=document.querySelector("#doneAll");i.addEventListener("submit",(function(t){console.log(">>>ADD TASK<<<"),t.preventDefault();const e=c.value;if(!e)return alert("Введите текст задачи");const o={id:Date.now(),text:e,done:!1};u.SetTasks(o),g(o),c.value="",c.focus(),s(),n()})),r.addEventListener("click",(function(t){if(console.log(">>>DELETE TASK<<<"),"delete"!==t.target.dataset.action)return;const e=t.target.closest(".list-group-item"),o=Number(e.id),a=u.GetTasks().filter((t=>t.id!==o));u.ReplaceTasks(a),e.remove(),s(),n()})),r.addEventListener("click",(function(t){if(console.log(">>>DONE TASK<<<"),"done"!==t.target.dataset.action)return;const e=t.target.closest(".list-group-item"),s=Number(e.id),o=u.GetTasks().map((t=>{if(t.id===s){const e={...t};return e.done=!0,e}return t}));u.ReplaceTasks(o),e.querySelector(".task-title").classList.toggle("task-title--done"),n()})),l.addEventListener("click",(function(){console.log("REMOVE ALL TASKS"),u.ReplaceTasks([]),n(),r.innerHTML="",s()})),d.addEventListener("click",(function(){console.log(">>>DELETE ALL TASK<<<");const t=u.GetTasks().map((t=>{const e={...t};return e.done=!0,e}));u.ReplaceTasks(t),n();const e=r.querySelectorAll(".task-title");for(const t of e)t.classList.add("task-title--done")}));const u=new class{constructor(){this.tasks=[]}GetTasks(){return this.tasks}SetTasks(t){this.tasks=[...this.tasks,t]}ReplaceTasks(t){this.tasks=t}};function g(t){const e=!0===t.done?"task-title task-title--done":"task-title",s=`<li id="${t.id}"class="list-group-item d-flex justify-content-between task-item">\n                <span class="${e}">${t.text} </span>\n                <div class="task-item__buttons">\n                    <button type="button" data-action="done" class="btn-action">\n                        <img src=${o} alt="Done" width="18" height="18">\n                    </button>\n                    <button type="button" data-action="delete" class="btn-action">\n                        <img src=${a} alt="Done" width="18" height="18">\n                    </button>\n                </div>\n            </li>`;r.insertAdjacentHTML("beforeend",s)}console.log(">>>GET TASKS FROM LOCAL STORAGE<<<"),localStorage.getItem("tasks")&&(u.ReplaceTasks(JSON.parse(localStorage.getItem("tasks"))),u.GetTasks().forEach((t=>g(t))),s())})();